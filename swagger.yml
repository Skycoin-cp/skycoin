basePath: /v2_add_base_path
consumes:
- application/json
definitions:
  Coins:
    description: It unmarshals a fixed-point decimal string to droplets and vice versa
    format: uint64
    title: Coins is a wrapper around uint64 which implements json.Unmarshaler and
      json.Marshaler.
    type: integer
    x-go-package: github.com/skycoin/skycoin/src/util/http
  CreatedTransaction:
    description: CreatedTransaction represents a transaction created by /wallet/transaction
    properties:
      fee:
        type: string
        x-go-name: Fee
      inner_hash:
        type: string
        x-go-name: InnerHash
      inputs:
        items:
          $ref: '#/definitions/createdTransactionInput'
        type: array
        x-go-name: In
      length:
        format: uint32
        type: integer
        x-go-name: Length
      outputs:
        items:
          $ref: '#/definitions/createdtTransactionOutput'
        type: array
        x-go-name: Out
      sigs:
        items:
          type: string
        type: array
        x-go-name: Sigs
      txid:
        type: string
        x-go-name: TxID
      type:
        format: uint8
        type: integer
        x-go-name: Type
    type: object
    x-go-package: github.com/skycoin/skycoin/src/api
  Decimal:
    description: number = value * 10 ^ exp
    title: Decimal represents a fixed-point decimal. It is immutable.
    type: object
    x-go-package: github.com/skycoin/skycoin/vendor/github.com/shopspring/decimal
  Hours:
    description: It unmarshals a fixed-point decimal string to droplets and vice versa
    format: uint64
    title: Hours is a wrapper around uint64 which implements json.Unmarshaler and
      json.Marshaler.
    type: integer
    x-go-package: github.com/skycoin/skycoin/src/util/http
  Ripemd160:
    description: Ripemd160 ripemd160
    items:
      format: uint8
      type: integer
    type: array
    x-go-package: github.com/skycoin/skycoin/src/cipher
  SHA256:
    description: SHA256 32 bytes
    items:
      format: uint8
      type: integer
    type: array
    x-go-package: github.com/skycoin/skycoin/src/cipher
  Sig:
    description: Sig signature
    items:
      format: uint8
      type: integer
    type: array
    x-go-package: github.com/skycoin/skycoin/src/cipher
  UnspentOutput:
    description: UnspentOutput represents a readable output
    properties:
      address:
        type: string
        x-go-name: Address
      block_seq:
        format: uint64
        type: integer
        x-go-name: BkSeq
      calculated_hours:
        format: uint64
        type: integer
        x-go-name: CalculatedHours
      coins:
        type: string
        x-go-name: Coins
      hash:
        type: string
        x-go-name: Hash
      hours:
        format: uint64
        type: integer
        x-go-name: Hours
      src_tx:
        type: string
        x-go-name: SourceTransaction
      time:
        format: uint64
        type: integer
        x-go-name: Time
    type: object
    x-go-package: github.com/skycoin/skycoin/src/readable
  address:
    description: It marshals and unmarshals the address as a string
    properties:
      Key:
        $ref: '#/definitions/Ripemd160'
      Version:
        format: uint8
        type: integer
    title: Address is a wrapper around cipher.Address which implements json.Unmarshaler
      and json.Marshaler.
    type: object
    x-go-name: Address
    x-go-package: github.com/skycoin/skycoin/src/util/http
  addressBalances:
    additionalProperties:
      $ref: '#/definitions/balancePair'
    description: AddressBalances represents a map of address balances
    type: object
    x-go-name: AddressBalances
    x-go-package: github.com/skycoin/skycoin/src/readable
  balance:
    description: Balance has coins and hours
    properties:
      coins:
        format: uint64
        type: integer
        x-go-name: Coins
      hours:
        format: uint64
        type: integer
        x-go-name: Hours
    type: object
    x-go-name: Balance
    x-go-package: github.com/skycoin/skycoin/src/readable
  balancePair:
    description: BalancePair records the confirmed and predicted balance of an address
    properties:
      confirmed:
        $ref: '#/definitions/balance'
      predicted:
        $ref: '#/definitions/balance'
    type: object
    x-go-name: BalancePair
    x-go-package: github.com/skycoin/skycoin/src/readable
  blockHeader:
    description: BlockHeader represents the readable block header
    properties:
      block_hash:
        type: string
        x-go-name: Hash
      fee:
        format: uint64
        type: integer
        x-go-name: Fee
      previous_block_hash:
        type: string
        x-go-name: PreviousHash
      seq:
        format: uint64
        type: integer
        x-go-name: BkSeq
      timestamp:
        format: uint64
        type: integer
        x-go-name: Time
      tx_body_hash:
        type: string
        x-go-name: BodyHash
      ux_hash:
        type: string
        x-go-name: UxHash
      version:
        format: uint32
        type: integer
        x-go-name: Version
    type: object
    x-go-name: BlockHeader
    x-go-package: github.com/skycoin/skycoin/src/readable
  blockTransactionVerbose:
    description: |-
      BlockTransactionVerbose has readable transaction data for transactions inside a block. It differs from Transaction
      in that it includes metadata for transaction inputs and the calculated coinhour fee spent by the block
    properties:
      fee:
        format: uint64
        type: integer
        x-go-name: Fee
      inner_hash:
        type: string
        x-go-name: InnerHash
      inputs:
        items:
          $ref: '#/definitions/transactionInput'
        type: array
        x-go-name: In
      length:
        format: uint32
        type: integer
        x-go-name: Length
      outputs:
        items:
          $ref: '#/definitions/transactionOutput'
        type: array
        x-go-name: Out
      sigs:
        items:
          type: string
        type: array
        x-go-name: Sigs
      txid:
        type: string
        x-go-name: Hash
      type:
        format: uint8
        type: integer
        x-go-name: Type
    type: object
    x-go-name: BlockTransactionVerbose
    x-go-package: github.com/skycoin/skycoin/src/readable
  createTransactionRequestWallet:
    description: createTransactionRequestWallet defines a wallet to spend from and
      optionally which addresses in the wallet
    properties:
      addresses:
        items:
          $ref: '#/definitions/address'
          type: string
        type: array
        x-go-name: Addresses
      id:
        type: string
        x-go-name: ID
      password:
        type: string
        x-go-name: Password
      unspents:
        items:
          $ref: '#/definitions/SHA256'
          type: string
        type: array
        x-go-name: UxOuts
    type: object
    x-go-name: CreateTransactionRequestWallet
    x-go-package: github.com/skycoin/skycoin/src/api
  createdTransactionInput:
    description: CreatedTransactionInput is a verbose transaction input
    properties:
      address:
        type: string
        x-go-name: Address
      block:
        format: uint64
        type: integer
        x-go-name: Block
      calculated_hours:
        type: string
        x-go-name: CalculatedHours
      coins:
        type: string
        x-go-name: Coins
      hours:
        type: string
        x-go-name: Hours
      timestamp:
        format: uint64
        type: integer
        x-go-name: Time
      txid:
        type: string
        x-go-name: TxID
      uxid:
        type: string
        x-go-name: UxID
    type: object
    x-go-name: CreatedTransactionInput
    x-go-package: github.com/skycoin/skycoin/src/api
  createdtTransactionOutput:
    description: CreatedTransactionOutput is a transaction output
    properties:
      address:
        type: string
        x-go-name: Address
      coins:
        type: string
        x-go-name: Coins
      hours:
        type: string
        x-go-name: Hours
      uxid:
        type: string
        x-go-name: UxID
    type: object
    x-go-name: CreatedTransactionOutput
    x-go-package: github.com/skycoin/skycoin/src/api
  hoursSelection:
    description: hoursSelection defines options for hours distribution
    properties:
      mode:
        type: string
        x-go-name: Mode
      share_factor:
        $ref: '#/definitions/Decimal'
        type: string
        x-go-name: ShareFactor
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-name: HoursSelection
    x-go-package: github.com/skycoin/skycoin/src/api
  receiver:
    description: receiver specifies a spend destination
    properties:
      address:
        $ref: '#/definitions/address'
        type: string
        x-go-name: Address
      coins:
        $ref: '#/definitions/Coins'
        type: string
        x-go-name: Coins
      hours:
        $ref: '#/definitions/Hours'
        type: string
        x-go-name: Hours
    type: object
    x-go-name: Receiver
    x-go-package: github.com/skycoin/skycoin/src/api
  transaction:
    description: Transaction transaction struct
    properties:
      In:
        items:
          $ref: '#/definitions/SHA256'
        type: array
      InnerHash:
        $ref: '#/definitions/SHA256'
      Length:
        format: uint32
        type: integer
      Out:
        items:
          $ref: '#/definitions/transactionOutput'
        type: array
      Sigs:
        items:
          $ref: '#/definitions/Sig'
        type: array
      Type:
        format: uint8
        type: integer
    type: object
    x-go-name: Transaction
    x-go-package: github.com/skycoin/skycoin/src/coin
  transactionInput:
    description: TransactionInput readable transaction input
    properties:
      calculated_hours:
        format: uint64
        type: integer
        x-go-name: CalculatedHours
      coins:
        type: string
        x-go-name: Coins
      hours:
        format: uint64
        type: integer
        x-go-name: Hours
      owner:
        type: string
        x-go-name: Address
      uxid:
        type: string
        x-go-name: Hash
    type: object
    x-go-name: TransactionInput
    x-go-package: github.com/skycoin/skycoin/src/readable
  transactionOutput:
    description: TransactionOutput hash output/name is function of Hash
    properties:
      Address:
        $ref: '#/definitions/address'
      Coins:
        format: uint64
        type: integer
      Hours:
        format: uint64
        type: integer
    type: object
    x-go-name: TransactionOutput
    x-go-package: github.com/skycoin/skycoin/src/coin
  transactionStatus:
    description: TransactionStatus represents the transaction status
    properties:
      block_seq:
        description: If confirmed, the sequence of the block in which the transaction
          was executed
        format: uint64
        type: integer
        x-go-name: BlockSeq
      confirmed:
        type: boolean
        x-go-name: Confirmed
      height:
        description: If confirmed, how many blocks deep in the chain it is. Will be
          at least 1 if confirmed
        format: uint64
        type: integer
        x-go-name: Height
      unconfirmed:
        type: boolean
        x-go-name: Unconfirmed
    type: object
    x-go-name: TransactionStatus
    x-go-package: github.com/skycoin/skycoin/src/readable
  unspentOutputs:
    description: UnspentOutputs slice of UnspentOutput
    items:
      $ref: '#/definitions/UnspentOutput'
    type: array
    x-go-name: UnspentOutputs
    x-go-package: github.com/skycoin/skycoin/src/readable
host: localhost
info:
  contact:
    email: john.doe@example.com
    name: Maceo Doe
    url: http://john.doe.com
  description: |-
    the purpose of this application is to provide an application
    that is using plain go code to define an API

    This should demonstrate all the possible comment annotations
    that are available to turn go code into a fully compliant swagger 2.0 spec
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: there are no TOS at this moment, use at your own risk we take no
    responsibility
  title: Skycoin API.
  version: 0.1.1
paths:
  /addresscount:
    get:
      description: addressCountHandler returns the total number of unique address
        that have coins
      operationId: addressCount
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/address_uxouts:
    get:
      description: |-
        Returns the historical, spent outputs associated with an address
        TODO add urls params
        address
      operationId: addUxOuts
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/block:
    get:
      description: blockHandler returns a block by hash or seq
      operationId: block
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/blockchain/metadata:
    get:
      description: |-
        or an explicit list of sequences.
        If using start and end, the block sequences include both the start and end point.
        Explicit sequences cannot be combined with start and end.
        TODO Add params to url
        Args:
        start [int]
        end [int]
        seqs [comma separated list of ints]
        verbose [bool]
      operationId: blockchainMetadata
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: blocksHandler returns blocks between a start and end point,
    post:
      consumes:
      - application/json
      description: |-
        or an explicit list of sequences.
        If using start and end, the block sequences include both the start and end point.
        Explicit sequences cannot be combined with start and end.
        TODO Add params to url
        Args:
        start [int]
        end [int]
        seqs [comma separated list of ints]
        verbose [bool]
      operationId: blockchainMetadata
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: blocksHandler returns blocks between a start and end point,
  /api/v1/blockchain/progress:
    get:
      description: blockchainProgressHandler returns the blockchain sync progress
      operationId: blockchainProgress
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/coinSupply:
    get:
      description: coinSupplyHandler returns coin distribution supply stats
      operationId: coinSupply
      parameters:
      - description: 'Coins distributed beyond the project:'
        in: query
        name: current_supply
        type: string
        x-go-name: CurrentSupply
      - description: TotalSupply is CurrentSupply plus coins held by the distribution
          addresses that are spendable
        in: query
        name: total_supply
        type: string
        x-go-name: TotalSupply
      - description: MaxSupply is the maximum number of coins to be distributed ever
        in: query
        name: max_supply
        type: string
        x-go-name: MaxSupply
      - description: CurrentCoinHourSupply is coins hours in non distribution addresses
        in: query
        name: current_coinhour_supply
        type: string
        x-go-name: CurrentCoinHourSupply
      - description: TotalCoinHourSupply is coin hours in all addresses including
          unlocked distribution addresses
        in: query
        name: total_coinhour_supply
        type: string
        x-go-name: TotalCoinHourSupply
      - description: Distribution addresses which count towards total supply
        in: query
        items:
          type: string
        name: unlocked_distribution_addresses
        type: array
        x-go-name: UnlockedAddresses
      - description: Distribution addresses which are locked and do not count towards
          total supply
        in: query
        items:
          type: string
        name: locked_distribution_addresses
        type: array
        x-go-name: LockedAddresses
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/csrf:
    get:
      description: |-
        Response:
        csrf_token: CSRF token to use in POST requests
      operationId: csrfToken
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Creates a new CSRF token. Previous CSRF tokens are invalidated by this
        call.
  /api/v1/health:
    get:
      description: healthHandler returns node health data
      operationId: health
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/injectTransaction:
    post:
      consumes:
      - application/json
      operationId: injectTransaction
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/badTransaction'
        "405":
          $ref: '#/responses/MethodNotPost'
        "500":
          $ref: '#/responses/otherError'
        "503":
          $ref: '#/responses/networkUnavailableForBroadcastingTransaction'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/last_blocks:
    get:
      description: |-
        lastBlocksHandler returns the most recent N blocks on the blockchain
        TODO Add params to url
        Args:
        num [int]
        verbose [bool]
      operationId: lastBlocks
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/network/connection/disconnect:
    get:
      description: |-
        outputsHandler returns UxOuts filtered by a set of addresses or a set of hashes MIERDA
        TODO add params url
        addrs: comma-separated list of addresses
        hashes: comma-separated list of uxout hashes
        If neither addrs nor hashes are specificed, return all unspent outputs.
        If only one filter is specified, then return outputs match the filter.
        Both filters cannot be specified.
      operationId: outputs
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
    post:
      consumes:
      - application/json
      description: |-
        outputsHandler returns UxOuts filtered by a set of addresses or a set of hashes
        TODO add params url and validations
        addrs: comma-separated list of addresses
        hashes: comma-separated list of uxout hashes
        If neither addrs nor hashes are specificed, return all unspent outputs.
        If only one filter is specified, then return outputs match the filter.
        Both filters cannot be specified.
      operationId: outputs
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/network/connections:
    get:
      description: |-
        connectionsHandler returns all outgoing connections
        TODO add params urls
        states: [optional] comma-separated list of connection states ("pending", "connected" or "introduced"). Defaults to "connected,introduced"
        direction: [optional] "outgoing" or "incoming". If not provided, both are included.
      operationId: connections
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/network/defaultConnections:
    get:
      description: They are not necessarily connected to.
      operationId: defaultConnections
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: defaultConnectionsHandler returns the list of default hardcoded bootstrap
        addresses.
  /api/v1/network/exchange:
    get:
      description: exchgConnectionsHandler returns all connections found through peer
        exchange
      operationId: exchgConnections
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/network/trust:
    get:
      description: |-
        trustConnectionsHandler returns all trusted connections
        In the default configuration, these will be a subset of the default hardcoded bootstrap addresses
      operationId: trustConnections
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/pendingTxs:
    get:
      description: |-
        pendingTxnsHandler returns pending (unconfirmed) transactions
        TODO add params url
        verbose: [bool] include verbose transaction input data
      operationId: pendingTxns
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/rawtx:
    get:
      description: |-
        The transaction may be confirmed or unconfirmed.
        TODO add urls params
        txid: transaction ID hash
      operationId: rawTxn
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Returns the hex-encoded byte serialization of a transaction.
  /api/v1/resendUnconfirmedTxns:
    post:
      consumes:
      - application/json
      description: Broadcasts all unconfirmed transactions from the unconfirmed transaction
        pool
      operationId: resendUnconfirmedTxns
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        "405":
          $ref: '#/responses/MethodNotPost'
        "500":
          $ref: '#/responses/otherError'
        "503":
          $ref: '#/responses/networkUnavailableForBroadcastingTransaction'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/transaction:
    get:
      description: |-
        transactionHandler returns a transaction identified by its txid hash
        TODO add params url
        txid: transaction hash
        verbose: [bool] include verbose transaction input data
        encoded: [bool] return as a raw encoded transaction
      operationId: transaction
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/transactions:
    get:
      description: |-
        transactionHandler returns a transaction identified by its txid hash
        TODO add params url
        addrs: Comma separated addresses [optional, returns all transactions if no address provided]
        confirmed: Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
        verbose: [bool] include verbose transaction input data
      operationId: transactions
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
    post:
      consumes:
      - application/json
      description: |-
        transactionHandler returns a transaction identified by its txid hash
        TODO add params url
        addrs: Comma separated addresses [optional, returns all transactions if no address provided]
        confirmed: Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
        verbose: [bool] include verbose transaction input data
      operationId: transactions
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/uxout:
    get:
      description: |-
        Returns an unspent output by ID
        TODO add urls params
        uxid: unspent output ID hash
      operationId: uxOut
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/version:
    get:
      description: versionHandler returns the application version info
      operationId: version
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet:
    get:
      description: |-
        Returns a wallet by id
        TODO add urls params
        id: wallet id [required]
      operationId: wallet
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/balance:
    get:
      description: |-
        Returns the wallet's balance, both confirmed and predicted.  The predicted
        balance is the confirmed balance minus the pending spends.
        TODO add urls params
        id: wallet id [required]
      operationId: walletBalance
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/create:
    post:
      consumes:
      - application/json
      description: |-
        Loads wallet from seed, will scan ahead N address and
        load addresses till the last one that have coins.
        TODO add urls params
        seed: wallet seed [required]
        label: wallet label [required]
        scan: the number of addresses to scan ahead for balances [optional, must be > 0]
        encrypt: bool value, whether encrypt the wallet [optional]
        password: password for encrypting wallet [optional, must be provided if "encrypt" is set]
      operationId: walletCreate
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/decrypt:
    post:
      consumes:
      - application/json
      description: |-
        Decrypts wallet
        TODO add urls params
        id: wallet id
        password: wallet password
      operationId: walletDecrypt
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/encrypt:
    post:
      consumes:
      - application/json
      description: |-
        Encrypts wallet
        TODO add urls params
        id: wallet id
        password: wallet password
      operationId: walletEncrypt
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/newAddress:
    post:
      consumes:
      - application/json
      description: |-
        Genreates new addresses
        TODO add urls params
        id: wallet id [required]
        num: number of address need to create [optional, if not set the default value is 1]
        password: wallet password [optional, must be provided if the wallet is encrypted]
      operationId: walletNewAddresses
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/newSeed:
    get:
      description: |-
        Generates wallet seed
        TODO add urls params
        entropy: entropy bitsize [optional, default value of 128 will be used if not set]
      operationId: newSeed
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/seed:
    post:
      consumes:
      - application/json
      description: |-
        Returns seed of wallet of given id
        Returns the historical, spent outputs associated with an address
        TODO add urls params
        id: wallet id
        password: wallet password
      operationId: walletSeed
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/spend:
    post:
      consumes:
      - application/json
      description: |-
        Creates and broadcasts a transaction sending money from one of our wallets
        to destination address.
        Response:
        balance: new balance of the wallet
        txn: spent transaction
        error: an error that may have occurred after broadcast the transaction to the network
        if this field is not empty, the spend succeeded, but the response data could not be prepared
        TODO add urls params
        id: wallet id
        dst: recipient address
        coins: the number of droplet you will send
        password: wallet password
      operationId: walletSpend
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/transaction:
    get:
      description: |-
        createTransactionHandler creates a signed transaction
        TODO add params url
        JSON body
      operationId: createTransaction
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/transactions:
    get:
      description: |-
        walletTransactionsHandler returns all unconfirmed transactions for all addresses in a given wallet
        TODO add urls params
        id: wallet id [required]
        verbose: [bool] include verbose transaction input data
      operationId: walletTransactions
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/unload:
    post:
      consumes:
      - application/json
      description: |-
        Returns the historical, spent outputs associated with an address
        TODO add urls params
        id: wallet id
      operationId: walletUnload
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallet/update:
    post:
      consumes:
      - application/json
      description: |-
        Update wallet label
        TODO add urls params
        id: wallet id [required]
        label: the label the wallet will be updated to [required]
      operationId: walletUpdate
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallets:
    get:
      description: Returns all loaded wallets
      operationId: wallets
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1/wallets/folderName:
    get:
      description: Returns the wallet directory path
      operationId: walletFolder
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v1s/balance:
    get:
      description: |-
        Returns the balance of one or more addresses, both confirmed and predicted.  The predicted
        balance is the confirmed balance minus the pending spends.
        TODO add urls params
        addrs: command separated list of addresses [required]
      operationId: balance
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
    post:
      consumes:
      - application/json
      description: |-
        Returns the balance of one or more addresses, both confirmed and predicted.  The predicted
        balance is the confirmed balance minus the pending spends.
        TODO add urls params
        addrs: command separated list of addresses [required]
      operationId: balance
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v2/address/verify:
    post:
      consumes:
      - application/json
      description: addressVerifyHandler verifies a Skycoin address
      operationId: addressVerify
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v2/transaction/verify:
    post:
      consumes:
      - application/json
      description: Decode and verify an encoded transaction
      operationId: verifyTxn
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
  /api/v2/wallet/recover:
    post:
      consumes:
      - application/json
      description: |-
        The first address will be generated from seed and compared to the first address
        of the specified wallet. If they match, the wallet will be regenerated
        with an optional password.
        If the wallet is not encrypted, an error is returned.
        TODO add urls params
        id: wallet id
        seed: wallet seed
        password: [optional] new password
      operationId: walletRecover
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/OK'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Recovers an encrypted wallet by providing the seed.
  /explorer/address:
    get:
      description: |-
        TODO add urls params:
        address [string]
      operationId: transactionsForAddress
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/someResponse'
        "422":
          $ref: '#/responses/validationError'
        default:
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: transactionsForAddressHandler returns all transactions (confirmed and
        unconfirmed) for an address
produces:
- application/json
responses:
  balanceResponse:
    description: BalanceResponse address balance summary struct
    headers:
      addresses: {}
      confirmed: {}
      predicted: {}
    schema:
      $ref: '#/definitions/addressBalances'
  createTransactionResponse:
    description: CreateTransactionResponse is returned by /wallet/transaction
    headers:
      encoded_transaction:
        type: string
      transaction: {}
    schema:
      $ref: '#/definitions/CreatedTransaction'
  createdTransaction:
    description: CreatedTransaction represents a transaction created by /wallet/transaction
    headers:
      fee:
        type: string
      inner_hash:
        type: string
      inputs:
        items:
          $ref: '#/definitions/createdTransactionInput'
        type: array
      length:
        format: uint32
        type: integer
      outputs:
        items:
          $ref: '#/definitions/createdtTransactionOutput'
        type: array
      sigs:
        items:
          type: string
        type: array
      txid:
        type: string
      type:
        format: uint8
        type: integer
  csrfToken:
    description: CSRFToken csrf token
    headers:
      ExpiresAt:
        format: date-time
        type: string
      Nonce:
        items:
          format: uint8
          type: integer
        type: array
  hoursSelection:
    description: hoursSelection defines options for hours distribution
    headers:
      mode:
        type: string
      share_factor: {}
      type:
        type: string
    schema:
      $ref: '#/definitions/Decimal'
  resendResult:
    description: ResendResult the result of rebroadcasting transaction
    headers:
      txids:
        items:
          type: string
        type: array
  spendResult:
    description: SpendResult represents the result of spending
    headers:
      balance: {}
      error:
        type: string
      txn: {}
    schema:
      $ref: '#/definitions/transaction'
  spentOutput:
    description: SpentOutput is an unspent output that was spent
    headers:
      coins:
        format: uint64
        type: integer
      hours:
        format: uint64
        type: integer
      owner_address:
        type: string
      spent_block_seq:
        format: uint64
        type: integer
      spent_tx:
        type: string
      src_block_seq:
        format: uint64
        type: integer
      src_tx:
        type: string
      time:
        format: uint64
        type: integer
      uxid:
        type: string
  transactionEncodedResponse:
    description: TransactionEncodedResponse represents the data struct of the response
      to /api/v1/transaction?encoded=1
    headers:
      encoded_transaction:
        type: string
      status: {}
      time:
        format: uint64
        type: integer
    schema:
      $ref: '#/definitions/transactionStatus'
  unconfirmedTransaction:
    description: UnconfirmedTransaction unconfirmed transaction
    headers:
      Announced:
        description: Last time we announced this txn
        format: int64
        type: integer
      Checked:
        description: Time the txn was last checked against the blockchain
        format: int64
        type: integer
      IsValid:
        description: If this txn is valid
        format: int8
        type: integer
      Received:
        description: Time the txn was last received
        format: int64
        type: integer
      Transaction: {}
    schema:
      $ref: '#/definitions/transaction'
  unconfirmedTransactionVerbose:
    description: UnconfirmedTransactionVerbose represents a verbose readable unconfirmed
      transaction
    headers:
      announced:
        format: date-time
        type: string
      checked:
        format: date-time
        type: string
      is_valid:
        type: boolean
      received:
        format: date-time
        type: string
      transaction: {}
    schema:
      $ref: '#/definitions/blockTransactionVerbose'
  unspentOutput:
    description: UnspentOutput represents a readable output
    headers:
      address:
        type: string
      block_seq:
        format: uint64
        type: integer
      calculated_hours:
        format: uint64
        type: integer
      coins:
        type: string
      hash:
        type: string
      hours:
        format: uint64
        type: integer
      src_tx:
        type: string
      time:
        format: uint64
        type: integer
  unspentOutputsSummary:
    description: UnspentOutputsSummary records unspent outputs in different status.
    headers:
      head: {}
      head_outputs:
        description: HeadOutputs are unspent outputs confirmed in the blockchain
      incoming_outputs:
        description: IncomingOutputs are unspent outputs being created by unconfirmed
          transactions
      outgoing_outputs:
        description: OutgoingOutputs are unspent outputs being spent in unconfirmed
          transactions
    schema:
      $ref: '#/definitions/unspentOutputs'
  verifyAddressResponse:
    description: VerifyAddressResponse is returned by POST /api/v2/address/verify
    headers:
      version:
        format: uint8
        type: integer
  verifyTxnResponse:
    description: VerifyTxnResponse the response data struct for /api/v2/transaction/verify
    headers:
      confirmed:
        type: boolean
      transaction: {}
    schema:
      $ref: '#/definitions/CreatedTransaction'
  walletFolder:
    description: WalletFolder struct
    headers:
      address:
        type: string
schemes:
- http
- https
security:
- api_key: []
securityDefinitions:
  api_key:
    in: header
    name: KEY
    type: apiKey
  oauth2:
    authorizationUrl: /oauth2/auth
    flow: accessCode
    in: header
    scopes:
      bar: foo
    tokenUrl: /oauth2/token
    type: oauth2
swagger: "2.0"
x-meta-array:
- value1
- value2
x-meta-array-obj:
- name: obj
  value: field
x-meta-value: value
